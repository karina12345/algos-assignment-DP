1. Falling Glass

(a) Optimal substructure/recurrence that would lead to a recursive solution:
    Optimal solution is based on optimal solutions of subproblems. 
    In this problem: our optimal solution is the minimum number of trials necessary.
    There are two possibilities at each trial: Falling glass can either break or not break, we take the max of each
    If falling glass breaks: after falling from the ith floor, broken glass gets swept away,
                             then we check i - 1 floors using m - 1 sheets
                             (since we know if we go higher than ith floor, glass will break)
    If falling glass doesn't break: after falling from the ith floor, then we check floors higher than i
                                    reducing the problem to n - i floors and using m sheets

(b) Recurrence tree for given (floors = 4, sheets = 2):  

                                          (4,2)
                ____________________________|__________________________________
                |                       |                 |                   |
                n=1                     n=2               n=3                 n=4
             /     |                   /   |               /\                  /\
          (0,1)    (3,2)          (1,1)    (2,2)       (2,1) (1,2)         (3,1) (0,2)
                  ___|_______             ___|_______
                 |   |       |            |          | 
                n=1  n=2     n=3          n=1        n=2
           /  |      |  \      |   \       |   \      |  \
       (0,1)  (2,2) (1,1)(1,2) (2,1)(0,2) (0,1)(1,2) (1,1)(0,2)
            ___|___
           |       |
           n=1    n=2
          / |      | \
      (0,1)(1,2) (1,1)(0,2)
                
(d) Distinct subproblems that you end up with given 4 floors and 2 sheets = 8
(e) Distinct subproblems that you end up with given n floors and m sheets = n*m
(f) Memoize GlassFallingRecur: Create an array for floors, sheets, where you can save results after each recursive call.
                               Before beginning each recursive call, check the array. The base cases would stay the same,
                               and you would check if [floors][sheets] is in memory, return it. Otherwise, 
                               make the recursive call, save it in memory, return.
                              
2. Rod Cutting

(a) Recursion tree for a rod of length 5: 
                  5
       /      /      \      \    \
       4      3      2      1    0
  |  | | |   | | |   | |    | 
 3  2  1 0   2 1 0   1 0    0
 ||| |\ \   |\ \     \
 210 1 0 0  1 0 0     0
 /\\  \      \
 1 00  0      0
 |
 0
 
 (b) Counterexample: Rod Length = 1, 2, 3, 4 
                         Prices: 1, 18, 30, 32
                         P/l   : 1, 9, 10, 8
The greedy approach would be to start with cutting rod to length 3 which is price of 30. Leaves us with length 1, price of 1. 
Total price is 31. However, we get more value using DP: If we cut the rod with length 2 = price of 18 + 18 = price of 36. 
